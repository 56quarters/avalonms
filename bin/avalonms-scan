#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Avalon Music Server
#
# Copyright (c) 2012 TSH Labs <projects@tshlabs.org>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are
# met:
# 
# * Redistributions of source code must retain the above copyright 
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


"""
"""

from __future__ import print_function

import argparse
import os
import os.path
import re
import sys

import avalon.cli


def get_parser(prog, defaults):
    """ """
    parser = argparse.ArgumentParser(prog=prog, description=__doc__)

    parser.add_argument(
        'collection',
        action=avalon.cli.CollectionAction,
        help='Path to the root of your music collection')

    parser.add_argument(
        '--db-path',
        metavar='PATH',
        help='File to use for backing SQLite database '
        '(default is %s)' % defaults.db_path)

    return parser


def main():
    """ """
    prog = re.sub('[^\w]+', '', os.path.basename(sys.argv[0]))
    defaults = avalon.cli.ScanAppDefaults()
    config = avalon.cli.ScanAppConfig(get_parser(prog, defaults), defaults)

    try:
        config.validate()
    except ValueError, e:
        print("%s: %s" % (prog, str(e)), file=sys.stderr)
        return 1

    return 0


if __name__ == '__main__':
    sys.exit(main())


