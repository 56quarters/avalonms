#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Avalon Music Server
#
# Copyright (c) 2012 TSH Labs <projects@tshlabs.org>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are
# met:
# 
# * Redistributions of source code must retain the above copyright 
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


"""
AvalonMS: Scan a music collection for metadata and expose it as an HTTP
service using JSON.
"""


from __future__ import print_function

import argparse
import os
import os.path
import re
import sys

import avalon.app
import avalon.cli
import avalon.exc


def get_parser(prog, defaults):
    """Parse required and optional program arguments."""
    parser = argparse.ArgumentParser(prog=prog, description=__doc__)

    parser.add_argument(
        'collection',
        action=avalon.cli.CollectionAction,
        help='Path to the root of your music collection')
    parser.add_argument(
        '--access-log',
        metavar='PATH',
        help='Log all requests to the server to this file '
        '(requests are logged to STDOUT by default)')
    parser.add_argument(
        '--daemon',
        action='store_true',
        help='Run the server in the background as a daemon')
    parser.add_argument(
        '--daemon-user',
        action=avalon.cli.DaemonUserAction,
        metavar='USER',
        help='Switch to this user when running as a daemon '
        '(default is %s)' % defaults.daemon_user)
    parser.add_argument(
        '--daemon-group',
        action=avalon.cli.DaemonGroupAction,
        metavar='GROUP',
        help='Switch to this group when running as a daemon '
        'default is %s)' % defaults.daemon_group)
    parser.add_argument(
        '--db-path',
        metavar='PATH',
        help='File to use for backing SQLite database '
        '(default is %s)' % defaults.db_path)
    parser.add_argument(
        '--error-log',
        metavar='PATH',
        help='Log any errors or informational messages to this file '
        '(errors are logged to STDERR by default)')
    parser.add_argument(
        '--no-scan',
        action='store_true',
        help='Do not rescan and rebuild the music collection database')
    parser.add_argument(
        '--server-address',
        action=avalon.cli.IpAddressAction,
        metavar='ADDR',
        help='IP Address to bind to (default is %s)' % defaults.server_address)
    parser.add_argument(
        '--server-port',
        action=avalon.cli.ServerPortAction,
        metavar='PORT',
        help='Port for server to listen  on '
        '(default is %s)' % defaults.server_port)
    parser.add_argument(
        '--server-queue',
        action=avalon.cli.ServerQueueAction,
        metavar='NUM',
        help='Number of connections to allow to be queued '
        '(default is %s)' % defaults.server_queue)
    parser.add_argument(
        '--server-threads',
        action=avalon.cli.ServerThreadsAction,
        metavar='NUM',
        help='Number of threads to use for handling requests '
        '(default is %s)' % defaults.server_threads)

    return parser


def main():
    """Parse and validate user input and start the application."""
    prog = re.sub('[^\w]+', '', os.path.basename(sys.argv[0]))
    defaults = avalon.cli.ServerAppDefaults()
    config = avalon.cli.ServerAppConfig(get_parser(prog, defaults), defaults)

    try:
        config.validate()
    except ValueError, e:
        print('%s: %s' % (prog, str(e)), file=sys.stderr)
        return 1

    try:
        app = avalon.app.AvalonMS(config)
        app.connect()
    except (avalon.exc.DatabaseError, avalon.exc.PermissionError), e:
        # NOTE: permission errors are caught here instead of attempting
        # to check for them during configuration validation since that
        # is susceptible to race conditions.
        print('%s: %s' % (prog, str(e)), file=sys.stderr)
        return 1

    app.start()
    return 0
    

if __name__ == '__main__':
    sys.exit(main())

