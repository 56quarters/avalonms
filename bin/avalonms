#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2012 TSH Labs <projects@tshlabs.org>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are
# met:
# 
# * Redistributions of source code must retain the above copyright 
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


"""
AvalonMS: Scan a music collection for metadata and expose it as an HTTP
service using JSON.
"""


from __future__ import print_function

import argparse
import os
import os.path
import re
import socket
import signal
import sys
import tempfile

import cherrypy

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

import avalon.exc
import avalon.log
import avalon.models
import avalon.scan
import avalon.services
import avalon.web


class ServerHandler(object):
    
    """ Allow the server to shutdown in response to signals."""

    def __init__(self, server):
        """ Store a reference to the HTTP server."""
        self._server = server

    def handle(self, signum, frame):
        """ Stop the server on SIGTERM of SIGINT."""
        if signum in (signal.SIGTERM, signal.SIGINT):
            self._server.stop()


class InputDefaults(object):

    """Compute default values for configuration options."""

    def __init__(self):
        """ Set defaults for all arguments or options."""
        self.collection = None
        self.access_log = None
        self.daemon = False
        self.db_path = os.path.join(tempfile.gettempdir(), 'avalon.sqlite')
        self.error_log = None
        self.no_scan = False
        self.server_address = socket.gethostbyname('localhost')
        self.server_port = 8080
        self.server_queue = 4
        self.server_threads = 4


class UserInput(object):

    """Validation for user options and arguments."""

    def __init__(self, opts, defaults):
        """ Initialize input to default values and then
            override it if there is a user supplied value.
        """
        self.collection = defaults.collection
        self.access_log = defaults.access_log
        self.daemon = defaults.daemon
        self.db_path = defaults.db_path
        self.error_log = defaults.error_log
        self.no_scan = defaults.no_scan
        self.server_address = defaults.server_address
        self.server_port = defaults.server_port
        self.server_queue = defaults.server_queue
        self.server_threads = defaults.server_threads

        self._set_user_opts(opts)

    def _set_user_opts(self, opts):
        """ Override default values with user supplied values
            if provided.
        """

        for attr in dir(opts):
            if attr.startswith('_'):
                continue
            val = getattr(opts, attr)
            if val is None:
                continue
            setattr(self, attr, val)

    def _is_valid_addr(self, addr):
        """ Return true if this is a valid IPv4 or IPv6 address, false
            otherwise.
        """
        protos = [socket.AF_INET]
        if socket.has_ipv6:
            protos.append(socket.AF_INET6)

        for proto in protos:
            try:
                socket.inet_pton(proto, addr)
            except socket.error:
                pass
            else:
                return True
        return False

    def validate(self):
        """ Validate user input values or default values. Raise
            a ValueError for any invalid input.
        """
        if not self.collection or not os.path.exists(self.collection):
            raise ValueError(
                "That doesn't appear to be a valid music collection path")

        if not self._is_valid_addr(self.server_address):
            raise ValueError(
                "That doesn't appear to be valid server address")
            
        try:
            self.server_port = int(self.server_port)
        except ValueError:
            raise ValueError("That doesn't appear to be a valid port")

        if 0 >= self.server_port:
            raise ValueError("The port for the server must be positive")

        try:
            self.server_threads = int(self.server_threads)
        except ValueError:
            raise ValueError(
                "That doesn't appear to be a valid number of threads")

        if 0 >= self.server_threads:
            raise ValueError("The number of threads to use must be positive")


def get_db_url(path):
    """ Convert a file system path to an connection string
        for an SQLite database.
    """
    return 'sqlite:///%s' % path


def get_prog():
    """ Get a sanitized version of arg[0].
    """
    return re.sub('[^\w]+', '', os.path.basename(sys.argv[0]))


def install_default_handler():
    """ Install signal handlers for use before the HTTP server is
        started that simply exit the script on TERM or INT.
    """
    def handle(signum, frame):
        if signum in (signal.SIGINT, signal.SIGTERM):
            raise SystemExit()

    signal.signal(signal.SIGTERM, handle)
    signal.signal(signal.SIGINT, handle)
    

def install_server_handler(server):
    """ Install signal handlers that give the HTTP server a chance
        to shutdown gracefully.
    """
    handler = ServerHandler(server)
    signal.signal(signal.SIGTERM, handler.handle)
    signal.signal(signal.SIGINT, handler.handle)


def get_server(options, session_handler, log):
    """ Configure and create a web app and HTTP server but
        do not start processing requests.
    """
    root = avalon.web.AvalonHandler(session_handler)
    app = cherrypy.tree.mount(root, script_name='/avalon')

    config = avalon.web.AvalonServerConfig()
    config.bind_addr = (options.server_address, options.server_port)
    config.gateway = app
    config.log = log
    config.num_threads = options.server_threads
    config.request_queue_size = options.server_threads * 2

    return avalon.web.AvalonServer(config)


def parse_args(defaults):
    """ Parse required and optional program arguments.
    """
    parser = argparse.ArgumentParser(
        prog=get_prog(),
        description=__doc__)

    parser.add_argument(
        'collection',
        help='Path to the root of your music collection')
    parser.add_argument(
        '--access-log',
        metavar='PATH',
        help='Log all requests to the server to this file')
    parser.add_argument(
        '--daemon',
        action='store_true',
        help='Run the server in the background as a daemon')
    parser.add_argument(
        '--db-path',
        metavar='PATH',
        help='File to use for backing SQLite database '
        '(default is %s)' % defaults.db_path)
    parser.add_argument(
        '--error-log',
        metavar='PATH',
        help='Log any errors or informational messages to this file')
    parser.add_argument(
        '--no-scan',
        action='store_true',
        help='Do not rescan and rebuild the music collection database')
    parser.add_argument(
        '--server-address',
        metavar='ADDR',
        help='IP Address to bind to (default is %s)' % defaults.server_address)
    parser.add_argument(
        '--server-port',
        metavar='PORT',
        help='Port for server to listen  on (default is %s)' % defaults.server_port)
    parser.add_argument(
        '--server-queue',
        metavar='NUM',
        help='Number of connections to allow to be queued '
        '(default is %s)' % defaults.server_queue)
    parser.add_argument(
        '--server-threads',
        metavar='NUM',
        help='Number of threads to use for handling requests '
        '(default is %s)' % defaults.server_threads)

    return parser.parse_args()


def main():
    install_default_handler()
    defaults = InputDefaults()
    args = parse_args(defaults)
    user_input = UserInput(args, defaults)
    prog = get_prog()

    try:
        user_input.validate()
    except ValueError, e:
        print('%s: %s' % (prog, str(e)), file=sys.stderr)
        return 1

    handler = avalon.models.SessionHandler(get_db_url(user_input.db_path))
    #log = avalon.log.AvalonLog()

    try:
        # Connect to the DB and drop all existing tables
        # unless the user asked us not to rescan the collection
        handler.connect(clean=not user_input.no_scan)
    except avalon.exc.ConnectionError, e:
        print('%s: %s' % (prog, str(e)), file=sys.stderr)
        return 1

    if not user_input.no_scan:
        # Scan collection and reinsert metadata unless the user
        # asked us not to
        #log.info("Scanning music collection...")
        files = avalon.scan.get_files(os.path.abspath(user_input.collection))
        tags = avalon.scan.get_tags(files)

        if not files:
            print('%s: No files found in music collection' % prog, file=sys.stderr)
            return 1

        #log.info("Loading metadata into database...")
        loader = avalon.services.InsertService(tags.values(), handler)
        loader.insert()

    #log.info("Serving HTTP requests on %s...", user_input.server_port)
    server = get_server(user_input, handler, None)
    install_server_handler(server)

    try:
        server.start()
    except socket.error, e:
        print('%s: Error starting HTTP server: %s' % (prog, str(e)), file=sys.stderr)
        return 1

    #log.info("Server stopping")
    return 0
    

if __name__ == '__main__':
    sys.exit(main())

