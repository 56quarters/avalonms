#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2012 TSH Labs <projects@tshlabs.org>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are
# met:
# 
# * Redistributions of source code must retain the above copyright 
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


"""
AvalonMS: Scan a music collection for metadata and expose it as an HTTP
service using JSON.
"""


from __future__ import print_function

import argparse
import os
import os.path
import re
import signal
import sys
import tempfile

import cherrypy

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

import avalon.errors
import avalon.log
import avalon.models
import avalon.scan
import avalon.services
import avalon.web


DEFAULT_DB_FILE = 'avalon.sqlite'


class ServerHandler(object):
    
    """
    """

    def __init__(self, server):
        """
        """
        self._server = server

    def handle(self, signum, frame):
        """
        """
        if signal.SIGTERM == signum:
            self._server.stop()
        elif signal.SIGINT == signum:
            self._server.stop()


def get_db_url(opt_db_url):
    """
    """
    if opt_db_url:
        return opt_db_url
    temp_path = os.path.join(tempfile.gettempdir(), DEFAULT_DB_FILE)
    try:
        os.unlink(temp_path)
    except OSError:
        pass
    return 'sqlite:///' + temp_path


def get_prog():
    """
    """
    return re.sub('[^\w]+', '', os.path.basename(sys.argv[0]))


def install_signal_handlers(server):
    """
    """
    handler = ServerHandler(server)
    signal.signal(signal.SIGTERM, handler.handle)
    signal.signal(signal.SIGINT, handler.handle)


def get_server(options, session_handler, log):
    """
    """
    root = avalon.web.AvalonHandler(session_handler)
    app = cherrypy.tree.mount(root, script_name='/avalon')

    config = avalon.web.AvalonServerConfig()
    config.bind_addr = (options.server_address, int(options.server_port))
    config.gateway = app
    config.log = log

    return avalon.web.AvalonServer(config)


def parse_options():
    """
    """
    parser = argparse.ArgumentParser(
        prog=get_prog(),
        description=__doc__)

    parser.add_argument(
        'collection',
        help='Path to the root of your music collection')
    parser.add_argument(
        '--verbose', 
        action='store_true',
        help='Enable extra output and debugging statements')
    parser.add_argument(
        '--db-url',
        metavar='URL',
        help='Connection string for the database. The URL should '
        'probably look something like "mysql://user@host/avalon" '
        'or "sqlite:///music/avalon.sqlite"')
    parser.add_argument(
        '--server-address',
        metavar='ADDR',
        help='IP Address to bind to')
    parser.add_argument(
        '--server-port',
        type=int,
        default=8080,
        metavar='PORT',
        help='Port to serve on')

    return parser.parse_args()


def main():
    opts = parse_options()
    prog = get_prog()
    db_url = get_db_url(opts.db_url)
    handler = avalon.models.SessionHandler(db_url, verbose=opts.verbose)
    log = avalon.log.AvalonLog()
    log.start()

    try:
        handler.connect()
    except avalon.errors.ConnectionError, e:
        print('%s: %s' % (prog, str(e)), file=sys.stderr)
        return 1

    log.info("Creating database tables...")
    handler.create_tables()

    log.info("Scanning music collection...")
    files = avalon.scan.get_files(os.path.abspath(opts.collection))
    tags = avalon.scan.get_tags(files)

    if not files:
        print('%s: No files found in music collection' % prog, file=sys.stderr)
        return 1

    log.info("Loading metadata into database...")
    service = avalon.services.InsertService(tags.values(), handler)
    service.insert_tracks()

    log.info("Serving HTTP requests...")
    server = get_server(opts, handler, log)
    install_signal_handlers(server)
    server.start()

    log.info("Server stopping")
    return 0
    

if __name__ == '__main__':
    sys.exit(main())

