; Configuration for running the Avalon Music Server under uWSGI
; http://uwsgi-docs.rtfd.org/

[uwsgi]

; Note that this configuration omits a bunch of features that uWSGI
; has (such as running as a daemon, changing users, error and access
; logging) because it is designed to be used when running uWSGI with
; supervisord and a separate public facing web server (such as Nginx).

; Use three workers in addition to the master process and HTTP server
; processes. Since the Avalon Music Server is largely CPU bound, you can
; increase the number of request that can be handled by increasing this
; number (up to a point!).
workers = 3

; Enable threads within each worker process. The Avalon Music Server
; doesn't currently use threads for anything but the uWSGI docs warn
; that trying to create threads without this will not result in any
; error messages, just silent failure.
enable-threads = True

; Use a master process to manager each of the worker processes and
; HTTP server. Additionally we use this process for coordinating the
; log essages from children.
master = True

; Have uWSGI die on SIGTERM so it plays well with supervisord
die-on-term = True

; Use the master process to handle all writes to logs on behalf of
; child processes.
log-master = True

; Don't have uWSGI do logging for each request (we'll rely on the
; front end web server for that)
disable-logging = True

; Try to clean up any files that are generated (pid files, sockets, etc.)
vacuum = True

; Start an HTTP server on the given host and port combination. Note
; that this only one of the various ways the uWSGI server can be run.
; See the uWSGI docs [1] for more information.
; [1] - http://uwsgi-docs.rtfd.org/en/latest/Options.html
http-socket = localhost:8000

; Avalon Music Server module that contains the WSGI callable object.
module = avalon.app.wsgi

; Name of the callable in the imported Avalon module.
callable = application
